# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3bc68666-ecde-4325-b856-14c8599c9fc1'
  vmImageName: 'ubuntu-latest' # name of your VM
  envName: 'newk'
  resourceName: 'default'
  imageRepository: 'petclinic'
  containerRegistry: 'acrpetclinic1.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'my-app-secret' # image pull secret
  
  # Agent VM image name

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
#    - task: Docker@2
#      displayName: Build and push an image to container registry
#      inputs:
#        command: buildAndPush
#        repository: $(imageRepository)
#        dockerfile: $(dockerfilePath)
#        containerRegistry: $(dockerRegistryServiceConnection)
#        tags: |
#          $(tag)
    - task: PublishBuildArtifacts@1
      displayName: Publish package ready for deployment
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/deployment.yaml'
        artifactName: 'drop'
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: $(envName).$(resourceName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: 'drop'
                  downloadPath: '$(System.ArtifactsDirectory)'
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'selvannewk8-myAKSCluster-default-1618226829416'
              command: 'get'
              arguments: 'secret/my-app-secret'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(System.ArtifactsDirectory)/drop/deployment.yaml                
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
              